<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>comedicomedy blogs</title>
        <link>https://www.comedicomedy.com</link>
        <description>Official comedic and co blog</description>
        <lastBuildDate>Fri, 16 Aug 2024 09:50:31 -0400</lastBuildDate>
        <ttl>1723801831</ttl>

        <item>
            <title>My First Blog Post</title>
            <link>https://www.comedicomedy.com/blogPosts/firstBlogPost.html</link>
            <description><![CDATA[ 
                <h2 id="title">First Blog Post</h2>   
                <h3 id="title">by comedicomedy. 8/3/24 - 7:30 pm</h3>

                <h4 id="header">introduction</h4>
                <p class="blog">
                    Hi I'm comedicomedy. I'm an aspiring engineer who also has an interest in music. I made this website to by my space on the internet. After watching videos on the personal web by <a href="https://www.youtube.com/watch?v=zswyWBtF-7Y">psychcool</a> and <a href="https://www.youtube.com/watch?v=rTSEr0cRJY8">You've Got Kat</a>
                    I was inspired to make my own site. I want to share random things I'm interested in every week. I'll probably make blogs about things related to stem and computer science.
                </p>                
                ]]>
            </description>
            <pubDate>Sat, 03 Aug 2024 19:54:48 -0400</pubDate>
        </item>

        <item>
            <title>comedicomedy website infrastructure: explained</title>
            <link>https://www.comedicomedy.com/blogPosts/ccWInf.html.html</link>
            <description><![CDATA[ 
            <h2 id="title">comedicomedy website infrastructure: explained</h2>
            <h3 id="title">by comedicomedy. 8/3/24 - 9:50 pm</h3>

            <h4 id="header">introduction</h4>
            <p class="blog">
                When you're hosting a website and want to share it with the world, you'll need a way to put it on the
                open internet. I do it by hosting using <a href="https://nginx.org/"> Ngnix </a> as a proxy and
                <a href="https://www.cloudflare.com/products/tunnel/"> Cloudflare tunnels </a> to self-host it on a <a
                    href="https://www.raspberrypi.com/products/"> Raspberry Pi </a>. Let me explain how the website
                works.
            </p>

            <h4 id="header">front end</h4>
            <p class="blog">
                The front end is simple as it's just a static website. I built it with just Vanilla Javascript, as you
                can probably see. Some neat things that I wanted to mention is that on the music review web page, when
                you hover over an album cover it shows the name of
                the album, the name of the artist, and the arbitrary score I gave.
            </p>
            <img src="../assets/webMusicPage.GIF" style="width: 320px; height: 180;">
            <p id="blog">
                Another neat thing that is under the visitor counter is a quote that is randomly selected from a
                collection of quotes that I think are funny.
                I think these are a few neat things from the
                perspective of a web dev novice.
            </p>

            <h4 id="header">back end</h4>
            <p class="blog">
                The backend is just for the visit counter. It is also the thing I spend the most time on, but that's
                mostly because I'm new to web dev and backend programming. I wrote the backend in <a
                    href="https://www.typescriptlang.org/">Typescript </a> using <a href="https://bun.sh/">Bun</a> as
                the runtime. How the backend works is that once the program is launched it reads a file, which is so
                whenever a power outage or other disturbance turns off the Pi or the program crashes there would be a
                backup for the number of visits. Once it reads the file it assigns that value it reads to a variable.
            </p>
            <img src="../assets/numOfVisitsVar.png" alt="picture of how the variable works">
            <p class="blog">
                The program then waits for a request. Once it gets a request it adds one to the number of visits
                variable and then sends it to the client in the form of a JSON string which the client then parses and
                displays. Whenever the number of visits is a multiple of 10 it writes the value to the file that the
                program reads when the server starts. That pretty much explains the backend.
            </p>

            <h4 id="header">hosting it</h4>
            <img src="../assets/RaspberryPi.jpg" alt="picture of raspberry pi in my house"
                style="width: 403px; height: 302px;">
            <p class="blog">
                As said in the introduction I am currently using Cloudflare tunnels and a Raspberry Pi to self-host the
                site with Ngnix as a reverse proxy. I was originally going to go serverless using <a
                    href="https://aws.amazon.com/amplify/">Amplify</a> for the front
                end and an <a href="https://aws.amazon.com/ec2/">EC2</a> instance for the back end. I couldn't use
                Amplify for the frontend as it's more of a
                stack and with how I was doing the backend it wasn't viable to use Amplify. So then I switched the front
                end to Vercel. The issue I had with <a href="https://vercel.com/">Vercel</a> is that integrating it with
                EC2. Which, in retrospect, was
                probably really easy to do. I also saw a video about <a
                    href="https://www.youtube.com/watch?v=Vp4glSVPT8o">self-hosting websites with Raspberry Pi</a> which
                made
                me believe it was easier to self-host. It probably would have been the same difficulty to host it on
                Vercel and AWS. I also already had a few Raspberry Pi's lying around. All of that led me to decide to
                self-host it. To put it on the public web I use Cloudflare tunnels, which are easy to use.
                <br>
                <br>
                All of this explains how the website works.
            </p>
                ]]>
            </description>
            <pubDate>Fri, 16 Aug 2024 09:50:31 +0400</pubDate>
        </item>
    </channel>

</rss>
